@model ProductDetailsModel.AddToCartModel
@using Grand.Web.Models.Catalog;
@using Grand.Core.Domain.Orders;
@if (!String.IsNullOrEmpty(Model.UpdatedShoppingCartItemId))
{
    @Html.HiddenFor(x => x.UpdatedShoppingCartItemId)
}
@if (Model.CustomerEntersPrice)
{
    <div class="customer-entered-price mb-1">
        <div class="price-input">
            @Html.LabelFor(model => model.CustomerEnteredPrice, new { @class = "enter-price-label" }, ":")
            @*round price*@
            @Html.TextBox("CustomerEnteredPrice", Convert.ToInt32(Math.Ceiling(Model.CustomerEnteredPrice)), new { @class = "form-control enter-price-input" })
        </div>
        <div class="price-range pt-1">
            @Model.CustomerEnteredPriceRange
        </div>
    </div>
}
@if (!Model.DisableBuyButton || Model.CustomerEntersPrice)
{

    if (!String.IsNullOrEmpty(Model.MinimumQuantityNotification))
    {
        <div class="min-qty-notification text-danger">@Model.MinimumQuantityNotification</div>
    }
    if (!Model.DisableBuyButton)
    {


if (Model.AllowedQuantities.Count > 0)
        {
            @Html.DropDownListFor(model => model.EnteredQuantity, Model.AllowedQuantities, new { @class = "col-2 custom-select form-control qty-dropdown" })
        }
        else
        {

            var addId = "addtocart_" + @Model.ProductId + "_EnteredQuantity";
        <label for="@addId" class="sr-only">@T("ShoppingCart.AddToCart")</label>
    @Html.TextBoxFor(model => model.EnteredQuantity, new { @class = "form-control qty-input" })
    if (!String.IsNullOrEmpty(Model.MeasureUnit))
    {
        <span class="qty-unit mr-2">
            @Model.MeasureUnit
        </span>
    }

}
{
    var addToCartText = "";
    if (!String.IsNullOrEmpty(Model.UpdatedShoppingCartItemId) && Model.UpdateShoppingCartItemType.HasValue && Model.UpdateShoppingCartItemType.Value == ShoppingCartType.ShoppingCart)
    {
        addToCartText = T("ShoppingCart.AddToCart.Update").Text;
    }
    else
    {
        addToCartText = T("ShoppingCart.AddToCart").Text;
        if (Model.IsRental)
        {
            addToCartText = T("ShoppingCart.Rent").Text;
        }
        if (Model.AvailableForPreOrder)
        {
            addToCartText = T("ShoppingCart.PreOrder").Text;
        }
    }

    //when a customer clicks 'Enter' button we submit the "add to cart" button (if visible)
    <script type="text/javascript">
        $(document).ready(function () {
            $("#@Html.FieldIdFor(model => model.EnteredQuantity)").keydown(function (event) {
                if (event.keyCode == 13) {
                    $("#add-to-cart-button-@Model.ProductId").click();
                    return false;
                }
            });
        });
    </script>
    <button type="button" id="add-to-cart-button-@Model.ProductId" class="btn btn-success add-to-cart-button" data-productid="@Model.ProductId" onclick="AjaxCart.addproducttocart_details('@Url.RouteUrl("AddProductToCart-Details", new { productId = Model.ProductId, shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart })', '#product-details-form');return false;">
        <span class="fa fa-shopping-cart"></span> <span>@addToCartText</span>
    </button>
        }

    }

    @Html.Widget("productdetails_add_info", Model.ProductId)

}
