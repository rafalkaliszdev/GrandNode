@model NewsItemModel
@using Grand.Web.Models.News;
@{
    Layout = "~/Views/Shared/_ColumnsTwo.cshtml";

    //title
    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Title);
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
}
<div class="page news-item-page">
        <h1 class="h2 generalTitle">@Model.Title</h1>
        <div class="news-date">
            <h5 class="text-muted">@Model.CreatedOn.ToString("D")</h5>
        </div>
        @Html.Widget("newsitem_page_before_body", Model.Id)
        <div class="news-body">
            @Html.Raw(Model.Full)
        </div>
        @Html.Widget("newsitem_page_before_comments", Model.Id)
        @if (Model.AllowComments)
        {
            <fieldset class="new-comment" id="comments">
                    <h5><strong>@T("News.Comments.LeaveYourComment")</strong></h5>
                <div class="notifications">
                    @{
                        var validationSummary = Html.ValidationSummary(true);
                    }
                    @if (!HtmlString.IsNullOrEmpty(validationSummary))
                    {
                        <div class="message-error">@validationSummary</div>
                    }
                    @{
                        var result = TempData["Grand.news.addcomment.result"] as string;
                    }
                    @if (!String.IsNullOrEmpty(result))
                    {
                        <div class="result">@result</div>
                    }
                </div>
                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()

                    
                    
                        <fieldset class="form-group">
                            @Html.LabelFor(model => model.AddNewComment.CommentTitle, new { @class = "col-form-label" }, ":")
                                    @Html.TextBoxFor(model => model.AddNewComment.CommentTitle, new { @class = "form-control enter-comment-title" })
                                    @Html.ValidationMessageFor(model => model.AddNewComment.CommentTitle)
                        </fieldset>
                        <fieldset class="form-group">
                            @Html.LabelFor(model => model.AddNewComment.CommentText, new { @class = "col-form-label" }, ":")
                                    @Html.TextAreaFor(model => model.AddNewComment.CommentText, new { @class = "form-control enter-comment-text" })
                                    @Html.ValidationMessageFor(model => model.AddNewComment.CommentText)
                        </fieldset>

                        if (Model.AddNewComment.DisplayCaptcha)
                        {
                            <div class="captcha-box">
                                @Html.Raw(Html.GenerateCaptcha())
                            </div>
                        }
                    <div class="buttons pt-1 pb-1">
                        <input type="submit" name="add-comment" class="btn btn-sm btn-success news-item-add-comment-button" value="@T("News.Comments.SubmitButton")" />
                    </div>
                }
            </fieldset>
                        if (Model.Comments.Count > 0)
                        {
                            <div class="comment-list text-xs-center text-md-left">
                                <h5><strong>@T("News.Comments")</strong></h5>
                                <div class="comments">
                                    @foreach (var comment in Model.Comments)
                                    {
                                        <div class="card comment news-comment mb-3">
                                            @if (comment.AllowViewingProfiles)
                                            {
                                                <h5 class="card-header"><a href="@Url.RouteUrl("CustomerProfile", new { id = comment.CustomerId })" class="username">@(comment.CustomerName)</a></h5>
                                            }
                                            else
                                            {
                                                <h5 class="card-header">
                                                    <span class="username">@(comment.CustomerName)</span>
                                                </h5>
                                            }
                                            <div class="card-block flex-row row">
                                                @if (!String.IsNullOrEmpty(comment.CustomerAvatarUrl))
                                                {
                                                    <div class="col-sm-3 col-12 comment-info">
                                                        <div class="user-info">

                                                       
                                                                <div class="avatar">
                                                                    @if (comment.AllowViewingProfiles)
                                                                    {
                                                                        <a href="@Url.RouteUrl("CustomerProfile", new { id = comment.CustomerId })" class="avatar-img-link">
                                                                            <img src="@(comment.CustomerAvatarUrl)" class="avatar-img" alt="avatar" />
                                                                        </a>
                                                                    }
                                                                    else
                                                                    {
                                                                        <img src="@(comment.CustomerAvatarUrl)" class="avatar-img" alt="avatar" />
                                                                    }
                                                                </div>
                                                        
                                                        </div>
                                                    </div>
                                                }
                                                <div class="col-sm-9 col-12 comment-content">
                                                    <div class="comment-time">
                                                        <label>@T("News.Comments.CreatedOn"):</label>
                                                        <span class="stat-value">@comment.CreatedOn.ToString("g")</span>
                                                    </div>
                                                    <div class="comment-title text-xs-left">
                                                        <strong class="comment-text">@comment.CommentTitle</strong>
                                                    </div>
                                                    <div class="comment-body text-xs-left">
                                                        <p class="comment-text">@Html.Raw(Grand.Core.Html.HtmlHelper.FormatText(comment.CommentText, false, true, false, false, false, false))</p>
                                                    </div>
                                                </div>
                                                @Html.Widget("newsitem_page_inside_comment", comment.Id)
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                            }
                        }
        @Html.Widget("newsitem_page_after_comments", Model.Id)
</div>
