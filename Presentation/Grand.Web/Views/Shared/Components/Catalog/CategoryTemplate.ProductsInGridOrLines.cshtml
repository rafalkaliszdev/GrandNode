@model CategoryModel
@{
    Layout = "~/Views/Shared/_ColumnsTwo.cshtml";
    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);

    var canonicalUrlsEnabled = EngineContextExperimental.Current.Resolve<SeoSettings>().CanonicalUrlsEnabled;
    if (canonicalUrlsEnabled)
    {
        var categoryUrl = Url.RouteUrl("Category", new { SeName = Model.SeName }, this.Request.Url.Scheme);
        Html.AddCanonicalUrlParts(categoryUrl);
    }

    var breadcrumbDelimiter = EngineContextExperimental.Current.Resolve<CommonSettings>().BreadcrumbDelimiter;
}
@using Grand.Core.Domain.Common;
@using Grand.Core.Domain.Seo;
@using Grand.Core.Infrastructure;
@using Grand.Web.Models.Catalog;
@*category breadcrumb*@
@section Breadcrumb
{
    @if (Model.DisplayCategoryBreadcrumb)
    {
            <ol class="breadcrumb">
                <li class="breadcrumb-item">
                    <a href="@Url.RouteUrl("HomePage")" title="@T("Categories.Breadcrumb.Top")">@T("Categories.Breadcrumb.Top")</a>
                </li>
                @foreach (var cat in Model.CategoryBreadcrumb)
                {
                    var isLastCategory = cat.Id == Model.Id;
                    
                        if (isLastCategory)
                            {
                                <li class="breadcrumb-item active">
                                    <strong class="current-item">@cat.Name</strong>
                                </li>
                            }
                        else
                            {
                                <li class="breadcrumb-item">
                                    <a href="@Url.RouteUrl("Category", new { SeName = cat.SeName })" title="@cat.Name">@cat.Name</a>
                                </li>
                            }
                }
            </ol>
            @Html.Widget("categorydetails_after_breadcrumb", Model.Id)
    }
}
@{
    //current category ID
    string currentCategoryId = "";
    if (Url.RequestContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.OrdinalIgnoreCase) &&
        Url.RequestContext.RouteData.Values["action"].ToString().Equals("category", StringComparison.OrdinalIgnoreCase))
    {
        currentCategoryId = Url.RequestContext.RouteData.Values["categoryId"].ToString();
    }


    //current manufacturer ID
    string currentManufacturerId = "";
    if (Url.RequestContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.OrdinalIgnoreCase) &&
        Url.RequestContext.RouteData.Values["action"].ToString().Equals("manufacturer", StringComparison.OrdinalIgnoreCase))
    {
        currentManufacturerId = Url.RequestContext.RouteData.Values["manufacturerId"].ToString();
    }


    //current product ID
    string currentProductId = "";
    if (Url.RequestContext.RouteData.Values["controller"].ToString().Equals("product", StringComparison.OrdinalIgnoreCase) &&
        Url.RequestContext.RouteData.Values["action"].ToString().Equals("productdetails", StringComparison.OrdinalIgnoreCase))
    {
        currentProductId = Url.RequestContext.RouteData.Values["productId"].ToString();
    }
}
<div class="page category-page">
        <h2 class="generalTitle">@Model.Name</h2>
        @Html.Widget("categorydetails_top", Model.Id)
        @*description*@
        @if (!String.IsNullOrWhiteSpace(Model.Description))
        {
                <div class="card category-description">
                    <div class="card-block">
                        <h2 class="card-title m-0">
                            @Html.Raw(Model.Description)
                        </h2>
                    </div>
                </div>
        }
        @Html.Widget("categorydetails_before_subcategories", Model.Id)
        @*subcategories*@
        @if (Model.SubCategories.Count > 0)
        {
            <div class="categotyItems">
                <div class="row">
                    @foreach (var item in Model.SubCategories)
                {
                <div class="col-md-4 col-sm-6 col-12 mb-2">
                    <div class="card">
                        <a href="@Url.RouteUrl("Category", new { SeName = item.SeName })" title="@item.PictureModel.Title">

                            <img class="card-img-top img-fluid" alt="@item.PictureModel.AlternateText" src="@item.PictureModel.ImageUrl" title="@item.PictureModel.Title">

                            <h2 class="h6 m-3 card-title">
                                @item.Name
                            </h2>

                        </a>
                    </div>
                </div>
                    }
                </div>
            </div>
        }
        @Html.Widget("categorydetails_before_featured_products", Model.Id)
        @*featured products*@
        @if (Model.FeaturedProducts.Count > 0)
        {
            <div class="col-12 product-grid featured-product-grid px-0">
                <h2 class="h5">
                    <strong>@T("Products.FeaturedProducts")</strong>
                </h2>
                <div class="row glex-grid">
                    @foreach (var item in Model.FeaturedProducts)
                    {
                        <div class="col-lg-4 col-sm-6 col-12">
                            @Html.Partial("_ProductBox", item)
                        </div>
                    }
                </div>
            </div>
        }
        @Html.Widget("categorydetails_after_featured_products", Model.Id)
        @if (Model.Products.Count > 0)
        {
            @Html.Partial("_CatalogSelectors", Model.PagingFilteringContext, new ViewDataDictionary(this.ViewData))
        }
        @Html.Widget("categorydetails_before_filters", Model.Id)

        @Html.Widget("categorydetails_before_product_list", Model.Id)

        @if (Model.Products.Count > 0)
        {
            if (Model.PagingFilteringContext.ViewMode == "grid")
            {
                <div class="subCategoryList">
                    <div class="row glex-grid">
                        @foreach (var product in Model.Products)
                        {
                            <div class="col-lg-4 col-sm-6 col-12">
                                @Html.Partial("_ProductBox", product)
                            </div>
                        }
                    </div>

                    @{
                        var pager = Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber");
                    }
                    @if (!pager.IsEmpty())
                    {
                        <nav aria-label="Page navigation">
                            @pager
                        </nav>
                    }
                    @Html.Widget("categorydetails_bottom", Model.Id)
                </div>
            }
            else
            {
                <div class="col-12">
                    <div class="row">
                        @foreach (var product in Model.Products)
                    {
                            @Html.Partial("_ProductBoxList", product)
                        }
                        @{
                            var pager = Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber");
                        }
                        @if (!pager.IsEmpty())
                    {
                            <nav aria-label="Page navigation">
                                @pager
                            </nav>
                        }
                        @Html.Widget("categorydetails_bottom", Model.Id)
                    </div>
                </div>

            }
        }
</div>
@section filters
{
        @*filtering*@
        @if (Model.PagingFilteringContext.PriceRangeFilter.Enabled)
    {
            @Html.Partial("_FilterPriceBox", Model.PagingFilteringContext.PriceRangeFilter, new ViewDataDictionary(this.ViewData))
        }
        @*filtering*@
        @if (Model.PagingFilteringContext.SpecificationFilter.Enabled)
    {
            @Html.Partial("_FilterSpecsBox", Model.PagingFilteringContext.SpecificationFilter, new ViewDataDictionary(this.ViewData))
        }
}