@model CheckoutBillingAddressModel
@using Grand.Web.Models.Checkout;
<div class="checkout-data">
    @Html.Widget("op_checkout_billing_address_top")
    @if (Model.ShipToSameAddressAllowed)
    {
        <div class="ship-to-same-address">
             <p class="selector">
                 <label class="custom-control custom-checkbox">
                     @Html.CheckBoxFor(x => x.ShipToSameAddress, new { @class = "custom-control-input" })
                     <span class="custom-control-indicator"></span>
                     <span class="custom-control-description">@*T*@("Checkout.ShipToSameAddress")</span>
                 </label>
             </p>
         </div>
    }
    
    @if(Model.ExistingAddresses.Count > 0)
    {
        <div class="select-billing-address">
            <div class="col-12">
                <label class="genera" for="billing-address-select">@*T*@("Checkout.SelectBillingAddressOrEnterNewOne")</label>
            </div>
            <div class="col-12">
                <select name="billing_address_id" id="billing-address-select" class="custom-select address-select"
                        title="" onchange="Billing.newAddress(!this.value)">
                    @foreach (var address in Model.ExistingAddresses)
                    {
                        var addressLine = "";
                        addressLine += address.FirstName;
                        addressLine += " " + address.LastName;
                        if (address.StreetAddressEnabled && !String.IsNullOrEmpty(address.Address1))
                        {
                            addressLine += ", " + address.Address1;
                        }
                        if (address.CityEnabled && !String.IsNullOrEmpty(address.City))
                        {
                            addressLine += ", " + address.City;
                        }
                        if (address.StateProvinceEnabled && !String.IsNullOrEmpty(address.StateProvinceName))
                        {
                            addressLine += ", " + address.StateProvinceName;
                        }
                        if (address.ZipPostalCodeEnabled && !String.IsNullOrEmpty(address.ZipPostalCode))
                        {
                            addressLine += " " + address.ZipPostalCode;
                        }
                        if (address.CountryEnabled && !String.IsNullOrWhiteSpace(address.CountryName))
                        {
                            addressLine += ", " + address.CountryName;
                        }
                        //how should we render "FormattedCustomAddressAttributes" here?
                        <option value="@(address.Id)">@(addressLine)</option>
                    }
                    <option value="" selected="@Model.NewAddressPreselected">@*T*@("Checkout.NewAddress")</option>
                </select>
            </div>
        </div>
    }
    @Html.Widget("op_checkout_billing_address_middle")
    <div class="new-billing-address" id="billing-new-address-form">
        <div class="enter-address">
            @*@{
                var validationSummary = Html.ValidationSummary(true);
            }
            @if (validationSummary.ToString() != null && validationSummary.ToString() != "")
            {
                <div class="message-error">@validationSummary</div>
            }
            @{
                var dataDictAddress = new ViewDataDictionary(,this.ViewData.ModelState);
                //Merge ModelState (required for validation)
                dataDictAddress.ModelState.Merge(ViewData.ModelState);
                dataDictAddress.TemplateInfo.HtmlFieldPrefix = "BillingNewAddress";
                @Html.Partial("_CreateOrUpdateAddress", Model.NewAddress, dataDictAddress)
            }*@
        </div>
    </div>
    @Html.Widget("op_checkout_billing_address_bottom")
</div>
