@model PollModel
@Html.ValidationSummary(true)
@Html.HiddenFor(model => model.Id)

<script>
    $(document).ready(function () {
        $("#poll-edit").show();
        $("#poll-edit").kendoTabStrip({
            animation: {
                open: {
                    effects: "fadeIn"
                }
            },
            select: tabstrip_on_tab_select
        });
    });
</script>
<div id="poll-edit" style="display:none">
    <ul>
        <li @Html.RenderSelectedTabIndex(0, GetSelectedTabIndex())>
            @T("Admin.ContentManagement.Polls.Info")
        </li>
        <li @Html.RenderSelectedTabIndex(1, GetSelectedTabIndex())>
            @T("Admin.ContentManagement.Polls.Answers")
        </li>
        <li @Html.RenderSelectedTabIndex(2, GetSelectedTabIndex())>
            @T("Admin.ContentManagement.Polls.Acl")
        </li>
        <li @Html.RenderSelectedTabIndex(3, GetSelectedTabIndex())>
            @T("Admin.ContentManagement.Polls.Stores")
        </li>

    </ul>
    <div>
        @TabInfo()
    </div>
    <div>
        @TabAnswers()
    </div>
    <div>
        @TabAcl()
    </div>
    <div>
        @TabStores()
    </div>

</div>

@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "poll-edit");
    EngineContextExperimental.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}


@*save selected tab index*@
<input type="hidden" id="selected-tab-index" name="selected-tab-index" value="@(GetSelectedTabIndex())">

@helper TabInfo()
{
    @(Html.LocalizedEditor<PollModel, PollLocalizedModel>("poll-info-localized",
            @<div class="form-horizontal">
                <div class="form-body">
                    <div class="form-group">
                        @Html.GrandLabelFor(model => model.Locales[item].Name)
                        <div class="col-md-9 col-sm-9">
                            @Html.GrandEditorFor(model => model.Locales[item].Name)
                            @Html.ValidationMessageFor(model => model.Locales[item].Name)
                        </div>
                    </div>
                    @Html.HiddenFor(model => model.Locales[item].LanguageId)
                </div>
            </div>
            ,
            @<div class="form-horizontal">
                <div class="form-body">
                    <div class="form-group">
                        @Html.GrandLabelFor(model => model.Name)
                        <div class="col-md-9 col-sm-9">
                            @Html.GrandEditorFor(model => model.Name)
                            @Html.ValidationMessageFor(model => model.Name)
                        </div>
                    </div>
                </div>
            </div>
            ))

    <div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                @Html.GrandLabelFor(model => model.SystemKeyword)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.SystemKeyword)
                    @Html.ValidationMessageFor(model => model.SystemKeyword)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.Published)
                <div class="col-md-9 col-sm-9">
                    @Html.EditorFor(model => model.Published)
                    @Html.ValidationMessageFor(model => model.Published)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.ShowOnHomePage)
                <div class="col-md-9 col-sm-9">
                    @Html.EditorFor(model => model.ShowOnHomePage)
                    @Html.ValidationMessageFor(model => model.ShowOnHomePage)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.AllowGuestsToVote)
                <div class="col-md-9 col-sm-9">
                    @Html.EditorFor(model => model.AllowGuestsToVote)
                    @Html.ValidationMessageFor(model => model.AllowGuestsToVote)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.DisplayOrder)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.DisplayOrder)
                    @Html.ValidationMessageFor(model => model.DisplayOrder)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.StartDate)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.StartDate)
                    @Html.ValidationMessageFor(model => model.StartDate)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.EndDate)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.EndDate)
                    @Html.ValidationMessageFor(model => model.EndDate)
                </div>
            </div>
        </div>
    </div>
}
@helper TabAnswers()
{
if (!String.IsNullOrEmpty(Model.Id))
{
        <div class="panel panel-default">
            <div class="panel-body">
                <div id="answers-grid"></div>
            </div>
            <div class="panel-footer">
                <input type="submit" id="btnAddNewOption" value="@T("Admin.ContentManagement.Polls.Answer.AddNew")" onclick="javascript:OpenWindow('@(Url.Action("PollAnswerCreatePopup", "Poll", new { pollId = Model.Id, btnId = "btnRefresh", formId = "poll-form" }))', 800, 350, true); return false;" class="k-button" />
                <input type="submit" id="btnRefresh" style="display: none" />
            </div>
        </div>

        <script>
            $(document).ready(function () {
                $("#answers-grid").kendoGrid({
                    dataSource: {
                        transport: {
                            read: {
                                url: "@Html.Raw(Url.Action("PollAnswers", "Poll", new { pollId = Model.Id }))",
                                type: "POST",
                                dataType: "json",
                                data: addAntiForgeryToken
                            },
                            destroy: {
                                url: "@Html.Raw(Url.Action("PollAnswerDelete", "Poll"))",
                                type: "POST",
                                dataType: "json",
                                data: addAntiForgeryToken
                            }
                        },
                        schema: {
                            data: "Data",
                            total: "Total",
                            errors: "Errors",
                            model: {
                                id: "Id",
                                fields: {
                                    Name: { editable: true, type: "string" },
                                    NumberOfVotes: { editable: false, type: "number" },
                                    DisplayOrder: { editable: true, type: "number" },
                                    Id: { editable: false, type: "string" }
                                }
                            }
                        },
                        requestEnd: function (e) {
                            if (e.type == "create" || e.type == "update") {
                                this.read();
                            }
                        },
                        error: function (e) {
                            display_kendoui_grid_error(e);
                            // Cancel the changes
                            this.cancelChanges();
                        },
                        serverPaging: true,
                        serverFiltering: true,
                        serverSorting: true
                    },
                    pageable: {
                        refresh: true,
                        numeric: false,
                        previousNext: false,
                        info: false
                    },
                    editable: {
                        confirmation: false,
                        mode: "inline"
                    },
                    scrollable: false,
                    columns: [{
                        field: "Name",
                        title: "@T("Admin.ContentManagement.Polls.Answers.Fields.Name")",
                        width: 300
                    }, {
                        field: "NumberOfVotes",
                        title: "@T("Admin.ContentManagement.Polls.Answers.Fields.NumberOfVotes")",
                        width: 100
                    }, {
                        field: "DisplayOrder",
                        title: "@T("Admin.ContentManagement.Polls.Answers.Fields.DisplayOrder")",
                        //integer format
                        format: "{0:0}",
                        width: 100
                    },
                    {
                        field: "Id",
                        title: "@T("Admin.Common.Edit")",
                        width: 100,
                        template: "<input type='submit' value='@T("Admin.Common.Edit")' onclick=\"javascript:OpenWindow('@Url.Content("~/Admin/Poll/PollAnswerEditPopup/")#=Id#?pollId=@(Model.Id)&btnId=btnRefresh&formId=poll-form', 800, 450, true); return false;\" class='k-button' />"
                    }, 
                    {
                        command: [{
                            name: "destroy",
                            text: "@T("Admin.Common.Delete")"
                        }],
                        width: 200
                    }]
                });
            });

        </script>
        <script type="text/javascript">
            $(document).ready(function () {
                $('#btnRefresh').click(function () {
                    //refresh grid
                    var grid = $("#answers-grid").data('kendoGrid');
                    grid.dataSource.read();
                    //return false to don't reload a page
                    return false;
                });
            });
        </script>

}
else
{
        <div class="note note-info">
            @T("Admin.ContentManagement.Polls.Answers.SaveBeforeEdit")
        </div>
}
}

@helper TabAcl()
{
    <script type="text/javascript">
        $(document).ready(function () {

            $("#@Html.FieldIdFor(model => model.SubjectToAcl)").click(toggleAcl);

            toggleAcl();
        });


        function toggleAcl() {
            if ($('#@Html.FieldIdFor(model => model.SubjectToAcl)').is(':checked')) {
                $('#pnl-acl').show();
            }
            else {
                $('#pnl-acl').hide();
            }
        }

    </script>
    <div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                @Html.GrandLabelFor(model => model.SubjectToAcl)
                <div class="col-md-9 col-sm-9">
                    <label class="mt-checkbox mt-checkbox-outline">
                        @Html.GrandEditorFor(model => model.SubjectToAcl)
                        <span></span>
                    </label>
                    @Html.ValidationMessageFor(model => model.SubjectToAcl)
                </div>
            </div>
            <div class="form-group" id="pnl-acl">
                @Html.GrandLabelFor(model => model.AvailableCustomerRoles)
                <div class="col-md-9 col-sm-9">
                    @if (Model.AvailableCustomerRoles != null && Model.AvailableCustomerRoles.Count > 0)
                    {
                        @Html.Action("AclDisabledWarning", "Common")
                        <div class="mt-checkbox-list">
                            @foreach (var customerRole in Model.AvailableCustomerRoles)
                            {
                                <label class="mt-checkbox mt-checkbox-outline">
                                    <input type="checkbox" name="SelectedCustomerRoleIds" value="@customerRole.Id" checked="@(Model.SelectedCustomerRoleIds!=null && Model.SelectedCustomerRoleIds.Contains(customerRole.Id))" />@customerRole.Name
                                    <span></span>
                                </label>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="note note-info">No customer roles defined</div>
                    }
                </div>
            </div>
        </div>
    </div>
}


@helper TabStores()
{
    <script type="text/javascript">
        $(document).ready(function () {

            $("#@Html.FieldIdFor(model => model.LimitedToStores)").click(toggleStoreMapping);

            toggleStoreMapping();
        });


        function toggleStoreMapping() {
            if ($('#@Html.FieldIdFor(model => model.LimitedToStores)').is(':checked')) {
                $('#pnl-available-stores').show();
            }
            else {
                $('#pnl-available-stores').hide();
            }
        }

    </script>
    <div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                @Html.GrandLabelFor(model => model.LimitedToStores)
                <div class="col-md-9 col-sm-9">
                    <label class="mt-checkbox mt-checkbox-outline">
                        @Html.GrandEditorFor(model => model.LimitedToStores)
                        <span></span>
                    </label>
                    @Html.ValidationMessageFor(model => model.LimitedToStores)
                </div>
            </div>
            <div class="form-group" id="pnl-available-stores">
                @Html.GrandLabelFor(model => model.AvailableStores)
                <div class="col-md-9 col-sm-9">
                    @if (Model.AvailableStores != null && Model.AvailableStores.Count > 0)
                    {
                        @Html.Action("MultistoreDisabledWarning", "Common")
                        <div class="mt-checkbox-list">
                            @foreach (var store in Model.AvailableStores)
                            {
                                <label class="mt-checkbox mt-checkbox-outline">
                                    <input type="checkbox" name="SelectedStoreIds" value="@store.Id" checked="@(Model.SelectedStoreIds != null && Model.SelectedStoreIds.Contains(store.Id))" />@store.Name
                                    <span></span>
                                </label>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="note note-info">
                            No stores defined
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}
